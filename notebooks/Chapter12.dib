#!markdown

# Chapter 12 - Improving Performance and Scalability Using Multitasking
- Monitoring performance and resource usage
- Running tasks asynchronously
- Synchronizing access to shared resources
- Understanding async and await

#!markdown

# Monitoring performance and memory using diagnostics

#!markdown

## Implementing a Recorder class

#!csharp

using System.Diagnostics; // Stopwatch 

using static System.Console;
using static System.Diagnostics.Process; // GetCurrentProcess() 

public static class Recorder
{
  private static Stopwatch timer = new();

  private static long bytesPhysicalBefore = 0;
  private static long bytesVirtualBefore = 0;
  
  public static void Start()
  {
    // force two garbage collections to release memory that is 
    // no longer referenced but has not been released yet 
    GC.Collect();
    GC.WaitForPendingFinalizers();
    GC.Collect();

    // store the current physical and virtual memory use
    bytesPhysicalBefore = GetCurrentProcess().WorkingSet64;
    bytesVirtualBefore = GetCurrentProcess().VirtualMemorySize64;
    timer.Restart();
  }

  public static void Stop()
  {
    timer.Stop();

    long bytesPhysicalAfter =
      GetCurrentProcess().WorkingSet64;

    long bytesVirtualAfter =
      GetCurrentProcess().VirtualMemorySize64;

    WriteLine("{0:N0} physical bytes used.",
      bytesPhysicalAfter - bytesPhysicalBefore);

    WriteLine("{0:N0} virtual bytes used.",
      bytesVirtualAfter - bytesVirtualBefore);

    WriteLine("{0} time span ellapsed.", timer.Elapsed);
    
    WriteLine("{0:N0} total milliseconds ellapsed.",
      timer.ElapsedMilliseconds);
  }
}

#!csharp

using System.Threading;

WriteLine("Processing. Please wait...");
Recorder.Start();

// simulate a process that requires some memory resources...
int[] largeArrayOfInts = Enumerable.Range(
  start: 1, count: 10_000).ToArray();

// ...and takes some time to complete
Thread.Sleep(new Random().Next(5, 10) * 1000);

Recorder.Stop();

#!markdown

## Measuring the efficiency of processing strings

#!csharp

int[] numbers = Enumerable.Range(
  start: 1, count: 50_000).ToArray();

WriteLine("Using string with +"); 
Recorder.Start();
string s = string.Empty; // i.e. ""
for (int i = 0; i < numbers.Length; i++) {
  s += numbers[i] + ", ";
}
Recorder.Stop();

WriteLine("Using StringBuilder");
Recorder.Start();
System.Text.StringBuilder builder = new();
for (int i = 0; i < numbers.Length; i++)
{
  builder.Append(numbers[i]);
  builder.Append(", ");
}
Recorder.Stop();

#!markdown

# Monitoring performance and memory using Benchmark.NET

Benchmark.NET requires the code to be compiled using a Release configuration that is not possible with .NET Interactive notebooks, as shown in the output when running the benchmarks below.

#!csharp

#r "nuget:BenchmarkDotNet,0.13.1"

#!csharp

using BenchmarkDotNet.Running;

#!csharp

using BenchmarkDotNet.Attributes; // [Benchmark]

public class StringBenchmarks
{
  int[] numbers;

  public StringBenchmarks()
  {
    numbers = Enumerable.Range(
      start: 1, count: 20).ToArray();
  }

  [Benchmark(Baseline = true)]
  public string StringConcatenationTest()
  {
    string s = string.Empty; // e.g. ""
    for (int i = 0; i < numbers.Length; i++) {
      s += numbers[i] + ", ";
    }
    return s; 
  }

  [Benchmark]
  public string StringBuilderTest()
  {
    System.Text.StringBuilder builder = new();
    for (int i = 0; i < numbers.Length; i++)
    {
      builder.Append(numbers[i]);
      builder.Append(", ");
    }
    return builder.ToString();
  }
}

#!csharp

BenchmarkRunner.Run<StringBenchmarks>();

#!markdown

# Running tasks asynchronously

There will be three methods that need to be executed: the first takes 3 seconds, the second takes 2 seconds, and the third takes 1 second. To simulate that work, we can use the `Thread` class to tell the current thread to go to sleep for a specified number of milliseconds.

#!markdown

## Running multiple actions synchronously

#!csharp

using System.Diagnostics; // Stopwatch

using static System.Console;

static void OutputThreadInfo()
{
  Thread t = Thread.CurrentThread;
  WriteLine(
    "Thread Id: {0}, Priority: {1}, Background: {2}, Name: {3}",
    t.ManagedThreadId, t.Priority,
    t.IsBackground, t.Name ?? "null");
}

static void MethodA()
{
  WriteLine("Starting Method A..."); 
  OutputThreadInfo();
  Thread.Sleep(3000); // simulate three seconds of work 
  WriteLine("Finished Method A.");
}

static void MethodB()
{
  WriteLine("Starting Method B..."); 
  OutputThreadInfo();
  Thread.Sleep(2000); // simulate two seconds of work 
  WriteLine("Finished Method B.");
}

static void MethodC()
{
  WriteLine("Starting Method C..."); 
  OutputThreadInfo();
  Thread.Sleep(1000); // simulate one second of work 
  WriteLine("Finished Method C.");
}

OutputThreadInfo();
Stopwatch timer = Stopwatch.StartNew();
WriteLine("Running methods synchronously on one thread.");
MethodA();
MethodB();
MethodC();
WriteLine($"{timer.ElapsedMilliseconds:#,##0}ms elapsed.");

#!markdown

## Running multiple actions asynchronously using tasks

#!csharp

using System.Diagnostics; // Stopwatch

using static System.Console;

static void OutputThreadInfo()
{
  Thread t = Thread.CurrentThread;
  WriteLine(
    "Thread Id: {0}, Priority: {1}, Background: {2}, Name: {3}",
    t.ManagedThreadId, t.Priority,
    t.IsBackground, t.Name ?? "null");
}

static void MethodA()
{
  WriteLine("Starting Method A..."); 
  OutputThreadInfo();
  Thread.Sleep(3000); // simulate three seconds of work 
  WriteLine("Finished Method A.");
}

static void MethodB()
{
  WriteLine("Starting Method B..."); 
  OutputThreadInfo();
  Thread.Sleep(2000); // simulate two seconds of work 
  WriteLine("Finished Method B.");
}

static void MethodC()
{
  WriteLine("Starting Method C..."); 
  OutputThreadInfo();
  Thread.Sleep(1000); // simulate one second of work 
  WriteLine("Finished Method C.");
}

OutputThreadInfo();
Stopwatch timer = Stopwatch.StartNew();

/*
WriteLine("Running methods synchronously on one thread.");
MethodA();
MethodB();
MethodC();
*/

WriteLine("Running methods asynchronously on multiple threads.");
Task taskA = new(MethodA);
taskA.Start();
Task taskB = Task.Factory.StartNew(MethodB);
Task taskC = Task.Run(MethodC);

Task[] tasks = { taskA, taskB, taskC };
Task.WaitAll(tasks);

WriteLine($"{timer.ElapsedMilliseconds:#,##0}ms elapsed.");

#!markdown

## Continuing with another task

However, often a task is dependent on the output from another task. To handle this scenario, we need to define continuation tasks.

#!csharp

static decimal CallWebService()
{
  WriteLine("Starting call to web service...");
  OutputThreadInfo();
  Thread.Sleep((new Random()).Next(2000, 4000));
  WriteLine("Finished call to web service.");
  return 89.99M;
}

static string CallStoredProcedure(decimal amount)
{
  WriteLine("Starting call to stored procedure...");
  OutputThreadInfo();
  Thread.Sleep((new Random()).Next(2000, 4000));
  WriteLine("Finished call to stored procedure.");
  return $"12 products cost more than {amount:C}.";
}

Stopwatch timer = Stopwatch.StartNew();

WriteLine("Passing the result of one task as an input into another.");

Task<string> taskServiceThenSProc = Task.Factory 
  .StartNew(CallWebService) // returns Task<decimal> 
  .ContinueWith(previousTask => // returns Task<string>
    CallStoredProcedure(previousTask.Result));

WriteLine($"Result: {taskServiceThenSProc.Result}");

WriteLine($"{timer.ElapsedMilliseconds:#,##0}ms elapsed.");

#!markdown

## Nested and child tasks

As well as defining dependencies between tasks, you can define nested and child tasks. A nested task is a task that is created inside another task. A child task is a nested task that must finish before its parent task is allowed to finish.

#!csharp

static void OuterMethod()
{
  WriteLine("Outer method starting...");
  Task innerTask = Task.Factory.StartNew(InnerMethod, 
    TaskCreationOptions.AttachedToParent);
  WriteLine("Outer method finished.");
}

static void InnerMethod()
{
  WriteLine("Inner method starting...");
  Thread.Sleep(2000);
  WriteLine("Inner method finished.");
}

Task outerTask = Task.Factory.StartNew(OuterMethod);

outerTask.Wait();
WriteLine("Console app is stopping.");

#!markdown

# Wrapping tasks around other objects

Extension methods cannot be defined in a .NET Interactive notebook. See compile error below for the `IsValidXmlTagAsync` method.

#!csharp

using System.Text.RegularExpressions;

public static class StringExtensions
{
  public static Task<bool> IsValidXmlTagAsync(this string input)
  {
    if (input == null)
    {
      return Task.FromException<bool>(
        new ArgumentNullException("Missing input parameter"));
    }
    if (input.Length == 0)
    {
      return Task.FromException<bool>(
        new ArgumentException("input parameter is empty."));
    }
    return Task.FromResult(Regex.IsMatch(input,
      @"^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$"));
  }
  // other methods
}

#!markdown

# Synchronizing access to shared resources

#!csharp

#nullable enable

static void MethodA()
{
  try
  {
    if (Monitor.TryEnter(SharedObjects.Conch, TimeSpan.FromSeconds(15)))
    {
      for (int i = 0; i < 5; i++)
      {
        Thread.Sleep(SharedObjects.Random.Next(2000));
        SharedObjects.Message += "A";
        Interlocked.Increment(ref SharedObjects.Counter);
        Write(".");
      }
    }
    else
    {
      WriteLine("Method A timed out when entering a monitor on conch.");
    } 
  }
  finally
  {
    Monitor.Exit(SharedObjects.Conch);
  }
}

static void MethodB()
{
  try
  {
    if (Monitor.TryEnter(SharedObjects.Conch, TimeSpan.FromSeconds(15)))
    {
      for (int i = 0; i < 5; i++)
      {
        Thread.Sleep(SharedObjects.Random.Next(2000));
        SharedObjects.Message += "B";
        Interlocked.Increment(ref SharedObjects.Counter);
        Write(".");
      } 
    }
    else
    {
      WriteLine("Method A timed out when entering a monitor on conch.");
    } 
  }
  finally
  {
    Monitor.Exit(SharedObjects.Conch);
  }
}

static class SharedObjects
{
  public static object Conch = new();
  public static Random Random = new();
  public static string? Message; // a shared resource 
  public static int Counter; // another shared resource
}

WriteLine("Please wait for the tasks to complete.");
Stopwatch watch = Stopwatch.StartNew();

Task a = Task.Factory.StartNew(MethodA);
Task b = Task.Factory.StartNew(MethodB);

Task.WaitAll(new Task[] { a, b });

WriteLine();
WriteLine($"Results: {SharedObjects.Message}.");
WriteLine($"{watch.ElapsedMilliseconds:N0} elapsed milliseconds.");
WriteLine($"{SharedObjects.Counter} string modifications.");

#!markdown

# Understanding async and await

#!csharp

using System.Net.Http;

HttpClient client = new();

HttpResponseMessage response =
  await client.GetAsync("http://www.apple.com/");

WriteLine("Apple's home page has {0:N0} bytes.",
  response.Content.Headers.ContentLength);

#!markdown

## Improving responsiveness for GUI apps

You cannot create WPF apps using .NET Interactive notebooks.

#!markdown

## Working with async streams

#!csharp

async static IAsyncEnumerable<int> GetNumbersAsync()
{
  Random r = new();
  
  // simulate work
  await Task.Delay(r.Next(1500, 3000));
  yield return r.Next(0, 1001);

  await Task.Delay(r.Next(1500, 3000));
  yield return r.Next(0, 1001);

  await Task.Delay(r.Next(1500, 3000));
  yield return r.Next(0, 1001);
}

await foreach (int number in GetNumbersAsync())
{
  WriteLine($"Number: {number}");
}
